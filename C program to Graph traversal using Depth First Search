#include <stdio.h>
#include <stdlib.h>
#define MAX_VERTICES 100
struct GraphNode {
    int data;
    struct GraphNode* next;
};
struct AdjList {
    struct GraphNode* head;
};
struct Graph {
    int numVertices;
    struct AdjList* array;
};
struct GraphNode* createNode(int data) {
    struct GraphNode* newNode = (struct GraphNode*)malloc(sizeof(struct GraphNode));
    if (newNode == NULL) {
        fprintf(stderr, "Memory allocation failed\n");
        exit(EXIT_FAILURE);
    }
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}
struct Graph* createGraph(int numVertices) {
    struct Graph* graph = (struct Graph*)malloc(sizeof(struct Graph));
    if (graph == NULL) {
        fprintf(stderr, "Memory allocation failed\n");
        exit(EXIT_FAILURE);
    }
    graph->numVertices = numVertices;

    graph->array = (struct AdjList*)malloc(numVertices * sizeof(struct AdjList));
    if (graph->array == NULL) {
        fprintf(stderr, "Memory allocation failed\n");
        exit(EXIT_FAILURE);
    }

    for (int i = 0; i < numVertices; ++i) {
        graph->array[i].head = NULL;
    }

    return graph;
}
void addEdge(struct Graph* graph, int src, int dest) {
    struct GraphNode* newNode = createNode(dest);
    newNode->next = graph->array[src].head;
    graph->array[src].head = newNode;
    newNode = createNode(src);
    newNode->next = graph->array[dest].head;
    graph->array[dest].head = newNode;
}
void DFSUtil(int vertex, struct Graph* graph, int visited[]) {
    visited[vertex] = 1; // Mark the current vertex as visited
    printf("%d ", vertex);
    struct GraphNode* temp = graph->array[vertex].head;
    while (temp != NULL) {
        int adjVertex = temp->data;
        if (!visited[adjVertex]) {
            DFSUtil(adjVertex, graph, visited);
        }
        temp = temp->next;
    }
}
void DFS(struct Graph* graph, int startVertex) {
    int visited[MAX_VERTICES] = {0}
    DFSUtil(startVertex, graph, visited);
}
int main() {
    struct Graph* graph = createGraph(6); 
    addEdge(graph, 0, 1);
    addEdge(graph, 0, 2);
    addEdge(graph, 1, 2);
    addEdge(graph, 1, 3);
    addEdge(graph, 2, 4);
    addEdge(graph, 3, 4);
    addEdge(graph, 3, 5);
    printf("Depth First Traversal starting from vertex 0:\n");
    DFS(graph, 0);
    return 0;
}
